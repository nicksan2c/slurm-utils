#!/usr/bin/perl

use Modern::Perl;
use File::Slurp qw(read_file);
use System::Command;
use Getopt::Compact;
use Carp qw(confess);
use List::MoreUtils qw(apply);

my $opts = Getopt::Compact->new(
  struct => [
      [[qw(J maintain-job-name)], q(Maintain unmodified job name)],
  ]
)->opts();

my $sbatch_cmd       = q{sbatch};
my $range_regexp     = qr{#SARRAY\s+\-\-range\s*=\s*([\d,\s-]+)};
my $jobname_regexp   = qr{#SBATCH\s+\-(?:\-job\-name|J)\s*=\s*([[:print:]]+)};
my $env_var_name     = q{SLURM_ARRAYID};
my $default_job_name = q{sarray};

my $batch    = read_file($ARGV[0]);
my @task_ids = get_task_ids($batch);
my $job_name = get_batch_job_name($batch);

foreach my $task_id (@task_ids) {
  my $name = generate_job_name($job_name, $task_id);
  my $cmd  = System::Command->new(
    ($sbatch_cmd, qq{--job-name=$name}), {
      env   => {$env_var_name => $task_id},
      input => $batch,
    }
  );

  my $stdout = $cmd->stdout();
  while (<$stdout>) { print $_; }

  my $stderr = $cmd->stderr();
  while (<$stderr>) { print $_; }

  $cmd->close();
}

sub get_task_ids {
  my ($batch_job) = @_;
  my @tasks       = ();
  my @ids         = ();
  my $tasks       = q{};

  while ($batch_job =~ m/$range_regexp/sg) {
    $tasks = $1;
  }

  confess 'Unable to determine array range from batch file' if not $tasks;

  if ($tasks =~ /,/) {
    @ids = split(/,/, $tasks);
  } else {
    push @ids, $tasks;
  }

  foreach my $id (@ids) {
    if ($id =~ /-/) {
      my ($start, $end) = split(/-/, $id);

      for my $i ($start .. $end) {
        push @tasks, $i;
      }
    } else {
      push @tasks, $id;
    }
  }

  return apply {$_ =~ s/^(?:[\r\n\s]+)|(?:[\r\n\s]+)$//g} @tasks;
}

sub get_batch_job_name {
  my ($batch_job) = @_;
  my $name        = $default_job_name;

  while ($batch_job =~ m/$jobname_regexp/sg) {
    $name = $1;
  }

  return $name;
}

sub generate_job_name {
  my ($name, $id) = @_;
  return ($opts->{'maintain-job-name'}) ? $name : sprintf q{%s[%d]}, $name, $id;
}

__END__

=head1 NAME

sarray

=head1 SYNOPSIS

  $ sarray batch_file.txt

  Example Batch script:

  #!/bin/bash

  #SBATCH --mail-type=ALL
  #SBATCH --mail-user=user@domain.com
  #SBATCH --job-name=sarray_test
  #SBATCH --time=1-0
  #SARRAY --range=1-10,20-30

  srun testload -t $((${SLURM_ARRAYID} + 60))

=head1 DESCRIPTION

This script is an attempt at providing the array job concept from PBS in SLURM.
You can run multiple jobs from a single batch script with the only difference in
each job being the array index. The array index gives the script a means of changing
parameters, loading differing data files or anything that requires a unique index.

=head1 USAGE

  sarray batch_file

  $ sarray ./job.txt
  $ sarray -J ./job.txt

=head1 REQUIRED ARGUMENTS

This script only accepts an batch script suitable for sbatch. The batch script
must include the comment marker to indicate the range of array indexes. The comment
is similiar to sbatch comments that must start in column zero of the script. The value
can be a range separated by a dash ( - ), a comma separated list of index numbers or both.

#SARRAY --range=1-20

or

#SARRAY --range=1-10,12,14,16-20

This would create jobs with the id appended to the end of your defined job name with the id
within brackets such as; jobname[1], jobname[2] ... jobname[20].

The array index is passed back to the batch script as the environment variable $SLURM_ARRAYID for
each iteration through the index(es) you provided via the --range option.

=head1 OPTIONS

=over

=item B<-J>      Do not modify the job name

=back

=head1 CONFIGURATION

None

=head1 DIAGNOSTICS

None

=head1 EXIT STATUS


=head1 DEPENDENCIES

=over

=item Modern::Perl

=item File::Slurp

=item System::Command

=back

=head1 BUGS AND LIMITATIONS

None known at this time.

=head1 INCOMPATIBILITIES

None Known at this time.

=head1 TODO

=over

=item * validate batch file passed on commandline

=item * test regexps aren't to greedy

=back

=head1 AUTHOR

Chris Scheller <schelcj@umich.edu>

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2011, all rights reserved by University of Michigan

